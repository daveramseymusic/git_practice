summary:
git init creates a new Git repository
git status inspects the contents of the working directory and staging area
git add adds files from the working directory to the staging area
git diff shows the difference between the working directory and the staging area
git commit permanently stores file changes from the staging area in the repository
git log shows a list of all previous commits



Git notes

git status
As you write the screenplay, you will be changing the contents of the working directory. You can check the status of those changes with:

git add filename_example.txt
We can add a file to the staging area with:

git diff changes.txt
to see differences between working dir and staging area

git commit is the command we’ll do next. However, one more bit of code is needed for a commit: the option -m followed by a message. Here’s an example:

git commit -m "Complete first line of dialogue"
Standard Conventions for Commit Messages:

Must be in quotation marks
Written in the present tense
Should be brief (50 characters or less) when using -m

Often with Git, you’ll need to refer back to an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with:

git log

ON token:
Using a token on the command line
Once you have a token, you can enter it instead of your password when performing Git operations over HTTPS.

For example, on the command line you would enter the following:

$ git clone https://github.com/username/repo.git
Username: your_username
Password: your_token
Personal access tokens can only be used for HTTPS Git operations. If your repository uses an SSH remote URL, you will need to switch the remote from SSH to HTTPS.

If you are not prompted for your username and password, your credentials may be cached on your computer. You can update your credentials in the Keychain to replace your old password with the token.
- here is the webpage for that: https://docs.github.com/en/github/using-git/updating-credentials-from-the-osx-keychain


In Git, the commit you are currently on is known as the HEAD commit. In many cases, the most recently made commit is the HEAD commit.

To see the HEAD commit, enter:

git show HEAD

What if you decide to change the ghost’s line in the working directory, but then decide you wanted to discard that change?
You could rewrite the line how it was originally, but what if you forgot the exact wording? The command
git checkout HEAD filename
will restore the file in your working directory to look exactly as it did when you last made a commit.

possible to add multiple files for one commit:
git add filename_1 filename_2

#We can unstage that file from the staging area using
git reset HEAD filename
#This command resets the file in the staging area to be the same as the HEAD commit. It does not discard file changes from the working directory, it just removes them from the staging area.


 
 ##Git enables you to rewind to the part before you made the wrong turn. You can do this with:

git reset commit_SHA
This command works by using the first 7 characters of the SHA of a previous commit. For example, if the SHA of the previous commit is 5d692065cf51a2f50ea8e7b19b5a7ae512f633ba, use:

git reset 5d69206
HEAD is now set to that previous commit.

review:
git checkout HEAD filename: Discards changes in the working directory.
git reset HEAD filename: Unstages file changes in the staging area.
git reset commit_SHA: Resets to a previous commit in your commit history.

We’ll want to discard changes in the working directory again.
There’s a commonly used shortcut for this command:
git checkout -- filename 
It does the same exact thing that git checkout HEAD filename does.

If you know you want to add every file in the working directory to the staging area, instead of adding each file individually, you can use a shortcut:
git add .
The . means “all files”. 

You can use the command below to answer the question: “which branch am I on?”
git branch

make new branch :  branch names can’t contain whitespaces:
git branch new_branch

You can switch to the new branch with:
git checkout branch_name

merge branch to the master branch
git merge branch_name

fencing is the giver branch, since it provides the changes.
master is the receiver branch, since it accepts those changes.

Notice the output: The merge is a “fast forward” because Git recognizes that fencing contains the most recent commit.
Git fast forwards master to be up to date with fencing.

In the code editor, look at resume.txt. Git uses markings to indicate the HEAD (master) version of the file and the fencing version of the file, like this:

#<<<<<<< HEAD
#master version of line
#=======
#fencing version of line
#>>>>>>> fencing

Note: If the markings are not showing in resume.txt, please close resume.txt and re-open via the folder icon at the top left corner of the editor.

Git asks us which version of the file to keep: the version on master or the version on fencing. You decide you want the fencing version.

From the code editor:
-Delete the content of the line as it appears in the master branch
-Delete all of Git’s special markings including the words HEAD and fencing. If any of Git’s markings remain, for example, >>>>>>> and =======, the conflict remains.

The command:
git branch -d branch_name

will delete the specified branch from your Git project.

#The following commands are useful in the Git branch workflow.:
git branch: Lists all a Git project’s branches.
git branch branch_name: Creates a new branch.
git checkout branch_name: Used to switch from one branch to another.
git merge branch_name: Used to join file changes from one branch to another.
git branch -d branch_name: Deletes the branch specified.

For pushing remotely:

$ git remote add origin  <REMOTE_URL> 
# Sets the new remote
$ git remote -v
# Verifies the new remote URL

#push what you have committed to out from your computer to github
git push -u 
